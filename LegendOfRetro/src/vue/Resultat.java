/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vue;

import bean.FactureLigneForm;
import bean.Form;
import bean.ProduitForm;
import bean.PromoForm;
import java.util.Vector;

/**
 *
 * @author bornbygoogle
 */
public class Resultat <F extends Form> extends javax.swing.JPanel
{
    protected Chercheur parent;
    protected Vector<F> res;
    protected static String [] typeJeu = {
        "Code Barre",
        "Nom",
        "Edition",
        "Zone",
        "Développeur"};
    protected static String [] typeConsole = {
        "Code Barre",
        "Nom",
        "Edition",
        "Zone",
        "Fabricant"};
    protected static String [] typePromo = {
        "Code Barre",
        "Nom",
        "Edition",
        "Zone",
        "Fabricant"};
    protected static String [] typeFactureLigneForm = {
        "Nom",
        "Quantité choisie",
        "Prix" };
    

    /**
     * Creates new form Resultat
     * @param parent x
     */
    public Resultat(Chercheur parent)
    {
        this.parent = parent;
        initComponents();
        
        //System.out.println(critProduit.getHeight());
        
        //destruction du tableau par défaut
        this.table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {}
        ));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        verbose = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        verbose.setForeground(new java.awt.Color(255, 3, 0));
        verbose.setText(" ");

        table.setAutoCreateRowSorter(true);
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Code Barre", "Nom", "Quantité disponible", "Developpeur", "Date de sortie", "Plus Infos"
            }
        ));
        table.setFillsViewportHeight(true);
        table.setShowVerticalLines(false);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 926, Short.MAX_VALUE)
                    .addComponent(verbose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(verbose)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    //si une ligne est sélectionnée, ce produit sera affiché dans les critères (avec ses autres champs).
    //si plusieurs lignes sont sélectionnées, on affiche la première ligne.
    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        int rowIndex = table.getSelectedRow();
        rowIndex = table.convertRowIndexToModel(rowIndex);  // Cette opération sert à fait la correspondance entre la view et le model de table
        if (0 <= rowIndex && rowIndex < this.res.size()) //this.res n'est normalement pas nul
            this.parent.selectionnerResultat(res.elementAt(rowIndex));
    }//GEN-LAST:event_tableMouseClicked
    
    //important : il est nécessaire que le vecteur contienne des données de type HOMOGENE (autrement dit, pas des formulaires différents. TODO: tester ça ?
    public void afficherRes(Vector<F> res)
    {
        this.res = res;
        //Affichage du nombre de résultats
        if (this.res.size() == 0)
        {
            afficherErreur("Aucun résultat.");
            this.table.setModel(new javax.swing.table.DefaultTableModel());
        }
        else if (this.res.size() > 0)
        {
            afficherMessage(this.res.size() + " résultats.");
            
            //On recrée le tableau
            String[] nomsChamps = null;
            Object[][] donnees = new Object[this.res.size()][];
                      
            int rowIndex = 0;
            Form test = this.res.iterator().next(); //on commence par déterminer le type de données avec un test. TODO: plus propre ?
            if (test instanceof PromoForm)
            {
                //on détermine l'intitulé des colonnes
                if ("jeu".equals(((PromoForm) test).getType()))
                    nomsChamps = typeJeu;
                else //if ("console".equals(((ProduitForm) test).getType()))
                    nomsChamps = typeConsole;
                
                rowIndex = 0;
                
                //on remplit le tableau ligne à ligne
                for (Form f : this.res)
                {
                    PromoForm pf = (PromoForm) f;
                    Object[] donneesLigne = {
                        pf.getCodeBarre(),
                        pf.getNom(),
                        pf.getEdition(),
                        pf.getZone(),
                        pf.getEditeur()
                    };
                    donnees[rowIndex] = donneesLigne;
                    rowIndex++;
                }
            }
            else if (test instanceof ProduitForm)
            {
                //on détermine l'intitulé des colonnes
                if ("jeu".equals(((ProduitForm) test).getType()))
                    nomsChamps = typeJeu;
                else //if ("console".equals(((ProduitForm) test).getType()))
                    nomsChamps = typeConsole;
                
                rowIndex = 0;
                
                //on remplit le tableau ligne à ligne
                for (Form f : this.res)
                {
                    ProduitForm pf = (ProduitForm) f;
                    Object[] donneesLigne = {
                        pf.getCodeBarre(),
                        pf.getNom(),
                        pf.getEdition(),
                        pf.getZone(),
                        pf.getEditeur()
                    };
                    donnees[rowIndex] = donneesLigne;
                    rowIndex++;
                }
            }
            else if (test instanceof FactureLigneForm){
               
                nomsChamps = typeFactureLigneForm;
                rowIndex = 0;
                //on remplit le tableau ligne à ligne
                for (Form f : this.res)
                {
                    FactureLigneForm pf = ( FactureLigneForm) f;
                    Object[] donneesLigne = {
                        pf.getProduit().getNom(),
                        pf.getQuantite(),
                        pf.getPrixLigne()
                    };
                    donnees[rowIndex] = donneesLigne;
                    rowIndex++;
                }  
            }    
            else
                throw new UnsupportedOperationException("Erreur lors de l'affichage du résultat : le type du formulaire est inconnu");
            // Affectation les resultats au Jtable
            this.table.setModel(new javax.swing.table.DefaultTableModel(donnees,nomsChamps));
        }
    }
    public void afficherErreur(String error)
    {
        this.verbose.setForeground(new java.awt.Color(255, 3, 0));
        this.verbose.setText(error);
        this.res = null;
        //destruction du tableau
        this.table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {}
        ));
    }
    public void afficherMessage(String message)
    {
        this.verbose.setForeground(new java.awt.Color(3, 143, 10));
        this.verbose.setText(message);
    }
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable table;
    public static javax.swing.JLabel verbose;
    // End of variables declaration//GEN-END:variables

}
